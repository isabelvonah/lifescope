---
  swagger: "2.0"
  info: 
    version: "0.0.1"
    title: "lifeScope"
    description: "API for lifeScope"
    termsOfService: "http://swagger.io/terms/"
    license: 
      name: "MIT"
  host: "localhost:8080"
  basePath: "/api/v1"
  schemes: 
    - "http"
  consumes: 
    - "application/json"
  produces: 
    - "application/json"
  paths: 
    /stats:
      get: 
        tags:
        - "Statistics"
        summary: "Returns all stat objects"
        operationId: "allStats"
        produces: 
          - "application/json"
        responses: 
          "200":
            description: "stats response"
            schema: 
              type: "array"
              items: 
                $ref: "#/definitions/Stats"
          default: 
            description: "unexpected error"
            schema: 
              $ref: "#/definitions/ErrorModel"
      post: 
        tags:
        - "Statistics"
        summary: "Creates new statistics object"
        operationId: "addStatsObj"
        produces: 
          - "application/json"
        parameters: 
          - 
            name: "stats"
            in: "body"
            description: "Data object to add"
            required: true
            schema: 
              $ref: "#/definitions/Stats"
        responses: 
          "200":
            description: "stats response"
            schema: 
              $ref: "#/definitions/Stats"
          default: 
            description: "unexpected error"
            schema: 
              $ref: "#/definitions/ErrorModel"
              
    /stats/{id}:
      get:
        tags:
        - "Statistics"
        summary: "Gets statistics"
        operationId: "getStats"
        produces: 
          - "application/json"
        parameters: 
        - 
          name: "id"
          in: "path"
          description: "ID of stats object"
          required: true
          type: "integer"
          format: "int64"
        responses: 
          "200":
            description: "stats response"
            schema: 
              type: "array"
              items: 
                $ref: "#/definitions/Stats"
          default: 
            description: "unexpected error"
            schema: 
              $ref: "#/definitions/ErrorModel"  
      put:
        tags:
        - "Statistics"
        summary: "Updates statistics"
        operationId: "updateStats"
        produces:
        - "application/json"
        parameters:
          - 
            name: "id"
            in: "path"
            description: "Stats ID that needs to be updated"
            required: true
            type: "integer"
            format: "int64"
          - 
            in: "body"
            name: "stats"
            description: "Updated stats"
            required: true
            schema:
              $ref: "#/definitions/Stats"
        responses:
          "400":
            description: "Invalid ID supplied"
          "404":
            description: "not found"
            
      delete: 
        tags:
        - "Statistics"
        summary: "Deletes single stats object based on ID"
        operationId: "deleteStats"
        parameters: 
          - 
            name: "id"
            in: "path"
            description: "ID of stat obj to delete"
            required: true
            type: "integer"
            format: "int64"
        responses: 
          "204":
            description: "person deleted"
          default: 
            description: "unexpected error"
            schema: 
              $ref: "#/definitions/ErrorModel"
        
    /person: 
      get: 
        tags:
        - "Person"
        summary: "Returns all people"
        operationId: "allPeople"
        produces: 
          - "application/json"
        responses: 
          "200":
            description: "person response"
            schema: 
              type: "array"
              items: 
                $ref: "#/definitions/Person"
          default: 
            description: "unexpected error"
            schema: 
              $ref: "#/definitions/ErrorModel"
      post: 
        tags:
        - "Person"
        summary: "Creates a new person"
        operationId: "addPerson"
        produces: 
          - "application/json"
        parameters: 
          - 
            name: "person"
            in: "body"
            description: "Person to add"
            required: true
            schema: 
              $ref: "#/definitions/Person"
        responses: 
          "200":
            description: "person response"
            schema: 
              $ref: "#/definitions/Person"
          default: 
            description: "unexpected error"
            schema: 
              $ref: "#/definitions/ErrorModel"
              
    /person/{id}: 
      get: 
        tags:
        - "Person"
        summary: "Returns person based on ID"
        operationId: "findPersonById"
        produces: 
          - "application/json"
        parameters: 
          - 
            name: "id"
            in: "path"
            description: "ID of person"
            required: true
            type: "string"
        responses: 
          "200":
            description: "person response"
            schema: 
              $ref: "#/definitions/Person"
          default: 
            description: "unexpected error"
            schema: 
              $ref: "#/definitions/ErrorModel"
      delete: 
        tags:
        - "Person"
        summary: "Deletes single person based on ID"
        operationId: "deletePerson"
        parameters: 
          - 
            name: "id"
            in: "path"
            description: "ID of person to delete"
            required: true
            type: "string"
        responses: 
          "204":
            description: "person deleted"
          default: 
            description: "unexpected error"
            schema: 
              $ref: "#/definitions/ErrorModel"
      put:
        tags:
        - "Person"
        summary: "Updates person"
        operationId: "updatePerson"
        produces:
        - "application/json"
        parameters:
          - 
            name: "id"
            in: "path"
            description: "Person ID that needs to be updated"
            required: true
            type: "string"
          - 
            in: "body"
            name: "body"
            description: "Updated person"
            required: true
            schema:
              $ref: "#/definitions/Person"
        responses:
          "400":
            description: "Invalid ID supplied"
          "404":
            description: "not found"
    
    /review:
      get: 
        tags:
        - "Review"
        summary: "Returns all reviews"
        operationId: "allReviews"
        produces: 
          - "application/json"
        responses: 
          "200":
            description: "review response"
            schema: 
              type: "array"
              items: 
                $ref: "#/definitions/Review"
          default: 
            description: "unexpected error"
            schema: 
              $ref: "#/definitions/ErrorModel"
      post: 
        tags:
        - "Review"
        summary: "Creates new review"
        operationId: "addReview"
        produces: 
          - "application/json"
        parameters: 
          - 
            name: "review"
            in: "body"
            description: "Review to add"
            required: true
            schema: 
              $ref: "#/definitions/Review"
        responses: 
          "200":
            description: "review response"
            schema: 
              $ref: "#/definitions/Review"
          default: 
            description: "unexpected error"
            schema: 
              $ref: "#/definitions/ErrorModel"        
            
    /review/{id}: 
      get: 
        tags:
        - "Review"
        summary: "Returns review based on ID"
        operationId: "findReviewById"
        produces: 
          - "application/json"
        parameters: 
          - 
            name: "id"
            in: "path"
            description: "ID of review"
            required: true
            type: "integer"
            format: "int64"
        responses: 
          "200":
            description: "review response"
            schema: 
              $ref: "#/definitions/Review"
          default: 
            description: "unexpected error"
            schema: 
              $ref: "#/definitions/ErrorModel"
      delete: 
        tags:
        - "Review"
        summary: "Deletes single review based on ID"
        operationId: "deleteReview"
        parameters: 
          - 
            name: "id"
            in: "path"
            description: "ID of review to delete"
            required: true
            type: "integer"
            format: "int64"
        responses: 
          "204":
            description: "review deleted"
          default: 
            description: "unexpected error"
            schema: 
              $ref: "#/definitions/ErrorModel"
      put:
        tags:
        - "Review"
        summary: "Updates review"
        operationId: "updateReview"
        produces:
        - "application/json"
        parameters:
          - 
            name: "id"
            in: "path"
            description: "Review ID that needs to be updated"
            required: true
            type: "integer"
            format: "int64"
          - 
            in: "body"
            name: "review"
            description: "Updated review"
            required: true
            schema:
              $ref: "#/definitions/Review"
        responses:
          "400":
            description: "Invalid ID supplied"
          "404":
            description: "not found"


  definitions: 
  
    Person: 
      type: "object"
      required: 
        - "name"
        - "age"
        - "sex"
        - "id"
      properties: 
        id:
          type: "string"
        name:
          type: "string"
        age:
          type: "integer"
          format: "int64"
        sex:
          type: "string"
        data:
          type: "object"
          properties:
            sleep:
              type: "integer"
              format: "int64"
            work:
              type: "integer"
              format: "int64"
            ageOfRetirement:
              type: "integer"
              format: "int64"
            media:
              type: "integer"
              format: "int64"
            admin:
              type: "integer"
              format: "int64"
        

    ErrorModel: 
      type: "object"
      required: 
        - "code"
        - "message"
      properties: 
        code: 
          type: "integer"
          format: "int32"
        message: 
          type: "string"
          
    Stats:
      type: "object"
      required:
        - "id"
      properties:
        id:
          type: "integer"
          format: "int64"
        numOfPeople:
          type: "integer"
          format: "int64"
        avgAge:
          type: "number"
          format: "float"
          
    Review:
      type: "object"
      required:
        - "id"
        - "content"
        - "nickname"
        - "date"
      properties:
        id:
          type: "string"
        content:
          type: "string"
        nickname:
          type: "string"
        date:
          type: "string"
        
          